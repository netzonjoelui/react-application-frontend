$ease-out-function: cubic-bezier(0.23, 1, 0.32, 1);

/**
 * Generic transform
 */
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

@mixin ease-out($duration: 450ms, $property: all, $delay: 0ms) {
  transition: $property $duration $ease-out-function $delay;
}

@mixin pulsate($animation-name, $start-size: 0.75, $end-size: 1) {
  @keyframes #{$animation-name} {
    0%   { @include transform(scale($start-size)); }
    50%  { @include transform(scale($end-size));   }
    100% { @include transform(scale($start-size)); }
  }
}

@mixin pulsate-animation($animation-name, $duration: 1.5s) {
  animation: $animation-name $duration infinite;
}

@function prefix($property, $prefixes: (webkit moz o ms)) {
  $vendor-prefixed-properties: transform background-clip background-size;
  $result: ();
  @each $prefix in $prefixes {
    @if index($vendor-prefixed-properties, $property) {
      $property: -#{$prefix}-#{$property}
    }
    $result: append($result, $property);
  }
  @return $result;
}

@function trans-prefix($transition, $prefix: moz) {
  $prefixed: ();
  @each $trans in $transition {
    $prop-name: nth($trans, 1);
    $vendor-prop-name: prefix($prop-name, $prefix);
    $prop-vals: nth($trans, 2);
    $prefixed: append($prefixed, ($vendor-prop-name $prop-vals), comma);
  }

  @return $prefixed;
}


@mixin transition($values...) {
  $transitions: ();
  @each $declaration in $values {
    $prop: nth($declaration, 1);
    $prop-opts: ();
    $length: length($declaration);
    @if $length >= 2 {
      @for $i from 2 through $length {
        $prop-opts: append($prop-opts, nth($declaration, $i));
      }
    }
    $trans: ($prop, $prop-opts);
    $transitions: append($transitions, $trans, comma);
  }

  -webkit-transition: trans-prefix($transitions, webkit);
  -moz-transition: trans-prefix($transitions, moz);
  -o-transition: trans-prefix($transitions, o);
  transition: $values;
}